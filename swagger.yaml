openapi: "3.0.0"
info:
  version: "0.1"
  title: "회비관리 메신저 API"
  description: '본 문서는 https://github.com/innovationCamp/swagger 에 등록된 버전입니다'
tags:
  - name: ChannelController
    description: '@RequestAttribute User로 현재 사용자 정보 확인'
  - name: User
    description: 사용자
  - name: Contact
    description: 연락처
  - name: Message
    description: 텍스트 메세지
  - name: wallet
    description: 공통 wallet
  - name: wallet/user
  - name: wallet/group
paths:
  /user:
    get:
      tags:
        - User
      summary: "Get specific user information"
      operationId: "getUser"
      responses:
        '200':
          description: "User information retrieved successfully"
          
    put:
      tags:
        - User
      summary: "Update user information"
      operationId: "updateUser"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUserDto'
      responses:
        '200':
          description: "User information updated successfully"
          
    delete:
      tags:
        - User
      summary: "Delete a user"
      operationId: "deleteUser"
      responses:
        '200':
          description: "User deleted successfully"

  /user/signup:
    post:
      tags:
        - User
      summary: "User SignUp"
      operationId: "signUpUser"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUserDto'
      responses:
        '200':
          description: "User created successfully"

  /user/login:
    post:
      tags:
        - User
      summary: "User login"
      operationId: "loginUser"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUserDto'
      responses:
        '200':
          description: "User logged in successfully"

  /user/logout:
    get:
      tags:
        - User
      summary: "User logout"
      operationId: "logoutUser"
      responses:
        '200':
          description: "User logged out successfully"

  /contact:
    get:
      tags:
        - Contact
      summary: "현재 유저의 contacts"
      operationId: "getAllContact"
      responses:
        '200':
          description: "List of contacts retrieved successfully"
    post:
      tags:
        - Contact
      summary: "Add a contact"
      operationId: "createContact"
      parameters:
        - in: header
          name: 'email'
          schema:
            type: string
          required: true
          description: 'ex) 연결된 대상의 정보'
      responses:
        '200':
          description: "Contact added successfully"

    delete:
      tags:
        - Contact
      summary: "Remove a contact"
      operationId: "removeContact"
      parameters:
        - in: header
          name: 'email'
          schema:
            type: string
          required: true
          description: 'ex) A와 연결을 끊고 싶다하면 A email'
      responses:
        '200':
          description: "Contact removed successfully"

  /message/{channelId}:
    post:
      tags:
        - Message
      summary: "message 전송"
      operationId: "createMessage"
      parameters:
        - name: "channelId"
          in: "path"
          description: "ID of the chat to delete"
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
      responses:
        '200':
          description: "Message sent successfully"
          
  /message/{messageId}:
        
    delete:
      tags:
        - Message
      summary: "Delete a message"
      operationId: "deleteMessage"
      parameters:
        - name: "messageId"
          in: "path"
          description: "ID of the chat to delete"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Message deleted successfully"
  # messageId 수정이 필요할까?
  # user가 작성한 모든 message 일단 보류

  /channel/{channelId}:
    get:
      tags:
        - ChannelController
      summary: 채널 id를 사용하여 특정 채널 조회
      operationId: getChannel
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetChannelDto'
    put:
      tags:
        - ChannelController
      summary: 채널 id를 사용하여 특정 채널 수정
      operationId: updateChannel
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChannelRequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateChannelResponseDto'
    delete:
      tags:
        - ChannelController
      summary: 채널 id를 사용하여 특정 채널 삭제
      operationId: deleteChannel
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  
  /channel:
    get:
      tags:
        - ChannelController
      summary: 사용자가 참여중인 채널 목록을 조회합니다.
      operationId: getAllChannelUserIn
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAllChannelUserInDto'
    post:
      tags:
        - ChannelController
      summary: 채널 생성
      description: 채널 생성 후 사용자를 관리자 권한으로 채널에 등록합니다.
      operationId: createChannel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChannelRequestDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateChannelResponseDto'
  /channel/{channelId}/user/{userId}:
    post:
      tags:
        - ChannelController
      summary: 특정 채널에 유저 추가
      operationId: addUserToChannel
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
    delete:
      tags:
        - ChannelController
      summary: 특정 채널에서 유저 추방
      operationId: kickUserFromChannel
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  
  /channel/{channelId}/content:
    get:
      tags:
        - ChannelController
      summary: 특정 채널의 채널 내용 전체 조회
      operationId: getChannelContents
      parameters:
        - name: channelId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetChannelContentDto'

  /wallet/transaction:
    post:
      tags:
        - wallet
      summary: "송금"
      operationId: "createTransaction"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createTransactionDto'
      responses:
        '200':
          description: "File retrieved successfully"
          
  /wallet/user:
    get:
      tags:
        - wallet/user
      summary: "유저 personalWallet 정보"
      operationId: "getPersonalWallet"
      responses:
        '200':
          description: "File retrieved successfully"
    post:
      tags:
        - wallet/user
      summary: "유저 personalWallet 개설"
      operationId: "createPersonalWallet"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPersonalWalletDto'
      responses:
        '200':
          description: "File retrieved successfully"
    delete:
      tags:
        - wallet/user
      summary: "유저 personalWallet 삭제"
      operationId: "deletePersonalWallet"
      responses:
        '200':
          description: "File retrieved successfully"
  
  /wallet/user/transaction/all:
    get:
      tags:
        - wallet/user
      summary: "유저 personalWallet 거래 정보"
      operationId: "getAllTransactionByPersonalWallet"
      responses:
        '200':
          description: "File retrieved successfully"

  /wallet/user/group/all:
    get:
      tags:
        - wallet/user
      summary: "유저가 속한 모든 groupWallet 정보"
      operationId: "getAllGroupWalletByUser"
      responses:
        '200':
          description: "File retrieved successfully"
          
  /wallet/group:
    post:
      tags:
        - wallet/group
      summary: "groupWallet 개설"
      operationId: "createGroupWallet"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createGroupWalletDto'
      responses:
        '200':
          description: "File retrieved successfully"

  /wallet/group/{groupWalletId}:
    get:
      tags:
        - wallet/group
      summary: "특정 groupWallet 정보"
      operationId: "getGroupWalletById"
      parameters:
        - name: "groupWalletId"
          in: "path"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "File retrieved successfully"
    post:
      tags:
        - wallet/group
      summary: "특정 groupWallet 참여"
      operationId: "participantGroupWalletById"
      parameters:
        - name: "groupWalletId"
          in: "path"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "File retrieved successfully"
    delete:
      tags:
        - wallet/group
      summary: "특정 groupWallet 삭제"
      operationId: "deleteGroupWalletById"
      parameters:
        - name: "groupWalletId"
          in: "path"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "File retrieved successfully"  
  
  /wallet/group/{groupWalletId}/transaction/all:
    get:
      tags:
        - wallet/group
      summary: "특정 groupWallet 모든 거래 정보"
      operationId: "getAllTransactionByGroupWallet"
      parameters:
        - name: "groupWalletId"
          in: "path"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "File retrieved successfully"
          
  /wallet/group/{groupWalletId}/participant/all:
    get:
      tags:
        - wallet/group
      summary: "특정 groupWallet에 모든 참여자 정보"
      operationId: "getAllParticipantByGroupWallet"
      parameters:
        - name: "groupWalletId"
          in: "path"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "File retrieved successfully"
    
  /wallet/group/all/channel/{channelId}:
    get:
      tags:
        - wallet/group
      summary: "해당 채널의 모든 groupWallet 정보"
      operationId: "getAllGroupWalletByChannelId"
      parameters:
      - name: "channelId"
        in: "path"
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: "File retrieved successfully"

  /notification/{channelId}:
    get:
      tags:
        - "Notification Management (내부 로직용)"
      summary: "채널에 알림 전파"
      operationId: "generateNotification"
      parameters:
        - name: "channelId"
          in: "path"
          description: "ID of the channel to remove a member from"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Notification created successfully"

  /file:
    post:
      tags:
        - "File Management (내부 로직용)"
      summary: "Upload a file"
      operationId: "uploadFile"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
      responses:
        '200':
          description: "File uploaded successfully"

  /file/{fileId}:
    get:
      tags:
        - "File Management (내부 로직용)"
      summary: "Get a specific file"
      operationId: "getFile"
      parameters:
        - name: "fileId"
          in: "path"
          description: "ID of the file to retrieve"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "File retrieved successfully"
    delete:
      tags:
        - "File Management (내부 로직용)"
      summary: "Delete a file"
      operationId: "deleteFile"
      parameters:
        - name: "fileId"
          in: "path"
          description: "ID of the file to delete"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "File deleted successfully"

components:
  #-------------------------------
  # Reusable schemas (data models)
  #-------------------------------
  schemas:
    createUserDto: # Can be referenced as '#/components/schemas/SignUp'
      type: object
      properties:
        email:
          type: string
        useranme:
          type: string
        password:
          type: string
          
    loginUserDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    
    UpdateChannelRequestDto:
      type: object
      properties:
        channelName:
          type: string
        channelPassword:
          type: string
        channelDescription:
          type: string
      description: 채널 수정 request Dto
    UpdateChannelResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        channelName:
          type: string
        channelDescription:
          type: string
      description: 채널 수정 response Dto
   
    CreateChannelRequestDto:
      type: object
      properties:
        channelName:
          type: string
        channelPassword:
          type: string
        channelDescription:
          type: string
      description: 새 채널 생성 request Dto
    CreateChannelResponseDto:
      type: object
      properties:
        channelId:
          type: integer
          format: int64
        channelCreateUserEmail:
          type: string
        channelName:
          type: string
        channelDescription:
          type: string
      description: 새 채널 생성 response Dto
    GetAllChannelUserInDto:
      type: object
      properties:
        channelId:
          type: integer
          format: int64
        readTimestamp:
          type: string
          format: date-time
        admin:
          type: boolean
      description: 유저가 가입한 채널 조회 response Dto
    GetChannelDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        channelName:
          type: string
        channelDescription:
          type: string
      description: 채널 한 개의 정보 조회 response Dto
    GetChannelContentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userEmail:
          type: string
        userName:
          type: string
        callOutContentId:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        notReadCount:
          type: integer
          format: int64
      description: ChannelContent 조회 response Dto
          
    inviteUserDto:
      type: object
      properties:
        email:
          type: string
    
    createTransactionDto:
      type: object
      properties:
        walletId:
          type: integer
        targetWalletId:
          type: integer
        amount:
          type: integer
        reservationTime:
          type: string
    
    createPersonalWalletDto:
      type: object
      properties:
        password:
          type: string
          
    createGroupWalletDto:
      type: object
      properties:
        channelId:
          type: integer
        walletName:
          type: string
        description:
          type: string
        password:
          type: string

servers:
  - url: "http://localhost:8080/api"
    description: "Local development server"
