openapi: "3.0.0"
info:
  version: "0.0.3"
  title: "Chat App API"
tags:
  - name: User
    description: 사용자
  - name: Contact
    description: 연락처
  - name: Message
    description: 텍스트 메세지
  - name: Channel
    description: 채널 ( 대화방 )
  - name: wallet
    description: 공통 wallet
  - name: wallet/personal
  - name: wallet/group
  - name: wallet/channel
paths:
  /user:
    get:
      tags:
        - User
      summary: "Get specific user information"
      operationId: "getUser"
      responses:
        '200':
          description: "User information retrieved successfully"
          
    put:
      tags:
        - User
      summary: "Update user information"
      operationId: "updateUser"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUserDto'
      responses:
        '200':
          description: "User information updated successfully"
          
    delete:
      tags:
        - User
      summary: "Delete a user"
      operationId: "deleteUser"
      responses:
        '200':
          description: "User deleted successfully"

  /user/signup:
    post:
      tags:
        - User
      summary: "User SignUp"
      operationId: "signUpUser"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUserDto'
      responses:
        '200':
          description: "User created successfully"

  /user/login:
    post:
      tags:
        - User
      summary: "User login"
      operationId: "loginUser"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUserDto'
      responses:
        '200':
          description: "User logged in successfully"

  /user/logout:
    get:
      tags:
        - User
      summary: "User logout"
      operationId: "logoutUser"
      responses:
        '200':
          description: "User logged out successfully"

  /contact:
    get:
      tags:
        - Contact
      summary: "현재 유저의 contacts"
      operationId: "getContacts"
      responses:
        '200':
          description: "List of contacts retrieved successfully"
    post:
      tags:
        - Contact
      summary: "Add a contact"
      operationId: "addContact"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: "Contact added successfully"

    delete:
      tags:
        - Contact
      summary: "Remove a contact"
      operationId: "removeContact"
      parameters:
        - in: header
          name: 'email'
          schema:
            type: string
          required: true
          description: 'ex) A와 연결을 끊고 싶다하면 A email'
      responses:
        '200':
          description: "Contact removed successfully"

  /message/{channelId}:
    post:
      tags:
        - Message
      summary: "message 전송"
      operationId: "createMessage"
      parameters:
        - name: "channelId"
          in: "path"
          description: "ID of the chat to delete"
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
      responses:
        '200':
          description: "Message sent successfully"
          
  /message/{messageId}:
        
    delete:
      tags:
        - Message
      summary: "Delete a message"
      operationId: "deleteMessage"
      parameters:
        - name: "messageId"
          in: "path"
          description: "ID of the chat to delete"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Message deleted successfully"
  # messageId 수정이 필요할까?
  # user가 작성한 모든 message 일단 보류

  /channel:
    post:
      tags:
        - Channel
      summary: "Create new channel"
      operationId: "createChannel"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createChannelDto'
      responses:
        '200':
          description: "Channel created successfully"

  /channel/{channelId}:
    get:
      tags:
        - Channel
      summary: "Get specific channel"
      operationId: "getChannel"
      parameters:
        - name: "channelId"
          in: "path"
          description: "ID of the channel to retrieve"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Channel retrieved successfully"
    put:
      tags:
        - Channel
      summary: "Update channel"
      operationId: "updateChannel"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createChannelDto'
      parameters:
        - name: "channelId"
          in: "path"
          description: "ID of the channel to update"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Channel updated successfully"
    delete:
      tags:
        - Channel
      summary: "Delete a channel"
      operationId: "deleteChannel"
      parameters:
        - name: "channelId"
          in: "path"
          description: "ID of the channel to delete"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Channel deleted successfully"

  /channel/{channelId}/message:
    get:
      tags:
        - Channel
      summary: "Get all messages in a channel"
      operationId: "getChannelMessages"
      parameters:
        - name: "channelId"
          in: "path"
          description: "ID of the channel to retrieve messages from"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Messages retrieved successfully"

  /channel/{channelId}/member:
    post:
      tags:
        - Channel
      summary: "Add a new member to channel"
      operationId: "createChannelMember"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inviteUserDto'
      parameters:
        - name: "channelId"
          in: "path"
          description: "ID of the channel to add a member to"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Member added successfully"

    delete:
      tags:
        - Channel
      summary: "exile a member from channel"
      operationId: "deleteChannelMember"
      parameters:
        - name: "channelId"
          in: "path"
          description: "ID of the channel to remove a member from"
          required: true
          schema:
            type: integer
        - in: header
          name: 'email'
          schema:
            type: string
          required: true
          description: "ex) A를 채널에서 추방하고 싶다면 A email"
      responses:
        '200':
          description: "Member removed successfully"

  /wallet/provide:
    post:
      tags:
        - wallet
      summary: "송금"
      operationId: "provideWalletMoney"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/provideWalletDto'
      responses:
        '200':
          description: "File retrieved successfully"
          
  /wallet/personal:
    get:
      tags:
        - wallet/personal
      summary: "유저 personalWallet 정보"
      operationId: "getPersonalWallet"
      responses:
        '200':
          description: "File retrieved successfully"
    post:
      tags:
        - wallet/personal
      summary: "유저 personalWallet 개설"
      operationId: "createPersonalWallet"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPersonalWalletDto'
      responses:
        '200':
          description: "File retrieved successfully"
    delete:
      tags:
        - wallet/personal
      summary: "유저 personalWallet 삭제"
      operationId: "deletePersonalWallet"
      responses:
        '200':
          description: "File retrieved successfully"
  
  /wallet/personal/transaction:
    get:
      tags:
        - wallet/personal
      summary: "유저 personalWallet 거래 정보"
      operationId: "getPersonalWalletTransaction"
      responses:
        '200':
          description: "File retrieved successfully"

  /wallet/personal/group/all:
    get:
      tags:
        - wallet/personal
      summary: "유저가 속한 모든 groupWallet 정보"
      operationId: "getAllGroupWalletByUser"
      responses:
        '200':
          description: "File retrieved successfully"
          
  /wallet/group:
    post:
      tags:
        - wallet/group
      summary: "groupWallet 개설"
      operationId: "createGroupWallet"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createGroupWalletDto'
      responses:
        '200':
          description: "File retrieved successfully"

  /wallet/group/{groupWalletId}:
    get:
      tags:
        - wallet/group
      summary: "특정 groupWallet 정보"
      operationId: "getGroupWalletById"
      parameters:
        - name: "groupWalletId"
          in: "path"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "File retrieved successfully"
          
    delete:
      tags:
        - wallet/group
      summary: "특정 groupWallet 삭제"
      operationId: "deleteGroupWalletById"
      parameters:
        - name: "groupWalletId"
          in: "path"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "File retrieved successfully"  
  
  /wallet/group/{groupWalletId}/transaction:
    get:
      tags:
        - wallet/group
      summary: "특정 groupWallet 거래 정보"
      operationId: "getGroupWalletTransaction"
      parameters:
        - name: "groupWalletId"
          in: "path"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "File retrieved successfully"
          
  /wallet/group/{groupWalletId}/participant:
    get:
      tags:
        - wallet/group
      summary: "특정 groupWallet에 참여자 정보"
      operationId: "getGroupWalletParticipant"
      parameters:
        - name: "groupWalletId"
          in: "path"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "File retrieved successfully"
    
  /wallet/channel/{channelId}/all:
    get:
      tags:
        - wallet/channel
      summary: "해당 채널의 모든 groupWallet 정보"
      operationId: "getAllGroupWalletByChannelId"
      parameters:
      - name: "channelId"
        in: "path"
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: "File retrieved successfully"

  /notification/{channelId}:
    get:
      tags:
        - "Notification Management (내부 로직용)"
      summary: "채널에 알림 전파"
      operationId: "generateNotification"
      parameters:
        - name: "channelId"
          in: "path"
          description: "ID of the channel to remove a member from"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Notification created successfully"

  /file:
    post:
      tags:
        - "File Management (내부 로직용)"
      summary: "Upload a file"
      operationId: "uploadFile"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
      responses:
        '200':
          description: "File uploaded successfully"

  /file/{fileId}:
    get:
      tags:
        - "File Management (내부 로직용)"
      summary: "Get a specific file"
      operationId: "getFile"
      parameters:
        - name: "fileId"
          in: "path"
          description: "ID of the file to retrieve"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "File retrieved successfully"
    delete:
      tags:
        - "File Management (내부 로직용)"
      summary: "Delete a file"
      operationId: "deleteFile"
      parameters:
        - name: "fileId"
          in: "path"
          description: "ID of the file to delete"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "File deleted successfully"

components:
  #-------------------------------
  # Reusable schemas (data models)
  #-------------------------------
  schemas:
    createUserDto: # Can be referenced as '#/components/schemas/SignUp'
      type: object
      properties:
        email:
          type: string
        useranme:
          type: string
        password:
          type: string
          
    loginUserDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    
    createChannelDto:
      type: object
      properties:
        channelName:
          type: string
        password:
          type: string
          
    inviteUserDto:
      type: object
      properties:
        email:
          type: string
    
    provideWalletDto:
      type: object
      properties:
        walletId:
          type: integer
        targetWalletId:
          type: integer
        money:
          type: integer
        reservationTime:
          type: string
    
    createPersonalWalletDto:
      type: object
      properties:
        password:
          type: string
          
    createGroupWalletDto:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        password:
          type: string

servers:
  - url: "http://localhost:8080/api"
    description: "Local development server"